// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _20232121_W2052838_PlanitGreen.Data;

#nullable disable

namespace _20232121_W2052838_PlanitGreen.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250403164249_AddTreesPlantedToUser")]
    partial class AddTreesPlantedToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Badge", b =>
                {
                    b.Property<int>("BadgeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BadgeID"));

                    b.Property<string>("BadgeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BadgeImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BadgeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriteriaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThresholdValue")
                        .HasColumnType("int");

                    b.HasKey("BadgeID");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<int>("DepartureID")
                        .HasColumnType("int");

                    b.Property<int>("EcoPointsUsed")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublicTransport")
                        .HasColumnType("bit");

                    b.Property<int>("PassengerQty")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("DepartureID");

                    b.HasIndex("UserID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Departure", b =>
                {
                    b.Property<int>("DepartureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartureID"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("Iscancelled")
                        .HasColumnType("bit");

                    b.Property<int>("PacksLimit")
                        .HasColumnType("int");

                    b.Property<int>("PacksQty")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TourID")
                        .HasColumnType("int");

                    b.HasKey("DepartureID");

                    b.HasIndex("TourID");

                    b.ToTable("Departure");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Destination", b =>
                {
                    b.Property<int>("DestinationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DestinationID"));

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DestinationID");

                    b.ToTable("Destination");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Donation", b =>
                {
                    b.Property<int>("DonationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationID"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("DonationID");

                    b.HasIndex("UserID");

                    b.ToTable("Donation");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.EcoPoints", b =>
                {
                    b.Property<int>("PointsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointsID"));

                    b.Property<int>("AvailablePoints")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PointsID");

                    b.HasIndex("UserID");

                    b.ToTable("EcoPoints");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.ItineraryItem", b =>
                {
                    b.Property<int>("ItineraryItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItineraryItemID"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourID")
                        .HasColumnType("int");

                    b.HasKey("ItineraryItemID");

                    b.HasIndex("TourID");

                    b.ToTable("ItineraryItem");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Passenger", b =>
                {
                    b.Property<int>("PassengerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassengerID"));

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PassengerID");

                    b.HasIndex("BookingID");

                    b.ToTable("Passenger");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TourID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReviewID");

                    b.HasIndex("TourID");

                    b.HasIndex("UserID");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Tour", b =>
                {
                    b.Property<int>("TourID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourID"));

                    b.Property<double>("CarbonFootprint")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DestinationID")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourStyleID")
                        .HasColumnType("int");

                    b.Property<int>("TreesPlanted")
                        .HasColumnType("int");

                    b.HasKey("TourID");

                    b.HasIndex("DestinationID");

                    b.HasIndex("TourStyleID");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.TourImage", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageID"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourID")
                        .HasColumnType("int");

                    b.HasKey("ImageID");

                    b.HasIndex("TourID");

                    b.ToTable("TourImage");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.TourStyle", b =>
                {
                    b.Property<int>("TourStyleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourStyleID"));

                    b.Property<string>("StyleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourStyleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TourStyleID");

                    b.ToTable("TourStyle");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("TreesPlanted")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.UserBadge", b =>
                {
                    b.Property<int>("UserBadgeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserBadgeID"));

                    b.Property<int>("BadgeID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserBadgeID");

                    b.HasIndex("BadgeID");

                    b.HasIndex("UserID");

                    b.ToTable("UserBadge");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.WishlistItem", b =>
                {
                    b.Property<int>("WishlistItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishlistItemID"));

                    b.Property<int>("TourID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("WishlistItemID");

                    b.HasIndex("TourID");

                    b.HasIndex("UserID");

                    b.ToTable("WishlistItem");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Booking", b =>
                {
                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.Departure", "Departure")
                        .WithMany("BookingList")
                        .HasForeignKey("DepartureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departure");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Departure", b =>
                {
                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.Tour", "Tour")
                        .WithMany("DepartureList")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Donation", b =>
                {
                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.EcoPoints", b =>
                {
                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.ItineraryItem", b =>
                {
                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.Tour", "Tour")
                        .WithMany("Itinerary")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Passenger", b =>
                {
                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Review", b =>
                {
                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.Tour", "Tour")
                        .WithMany("Reviews")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Tour", b =>
                {
                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.Destination", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.TourStyle", "TourStyle")
                        .WithMany()
                        .HasForeignKey("TourStyleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("TourStyle");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.TourImage", b =>
                {
                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.Tour", "Tour")
                        .WithMany("ImageList")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.UserBadge", b =>
                {
                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.User", "User")
                        .WithMany("UserBadge")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.WishlistItem", b =>
                {
                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_20232121_W2052838_PlanitGreen.Models.User", "User")
                        .WithMany("Wishlist")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Departure", b =>
                {
                    b.Navigation("BookingList");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.Tour", b =>
                {
                    b.Navigation("DepartureList");

                    b.Navigation("ImageList");

                    b.Navigation("Itinerary");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("_20232121_W2052838_PlanitGreen.Models.User", b =>
                {
                    b.Navigation("UserBadge");

                    b.Navigation("Wishlist");
                });
#pragma warning restore 612, 618
        }
    }
}
